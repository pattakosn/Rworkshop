class(x)
object.size(x)
str(comb)
gc()
gc()
outerM <- function(X){
    cat("Crunching column", X, "\n")
    outerM1 <- function(X){
#Define the function we will use for the outer product
    FUN <- match.fun("!=")
    #Get first part of the list
    y <- x[comb[[1]][b3[X,1]:b3[X,2]],1]
    #Get second part of the list
    y1 <- x[comb[[2]][b3[X,1]:b3[X,2]],1]
    #Find identical
    y2 <- FUN(y,y1)
    return(y2)
}
y2 <- unlist(lapply(1:dim(b3)[1], outerM1))

    y2 <- add[1 + X] * y2
    return(y2)
}
dim(b3)
install.packages("utils")
txtProgressBar(min = 0, max = 20), style = 3)
txtProgressBar(min = 0, max = 20, style = 3)
pb <-  txtProgressBar(min = 0, max = 20, style = 3)
outerM <- function(X){
    cat("Crunching column", X, "\n")
    outerM1 <- function(X){
        #Define the function we will use for the outer product
        FUN <- match.fun("!=")
        #Get first part of the list
        y <- x[comb[[1]][b3[X,1]:b3[X,2]],1]
        #Get second part of the list
        y1 <- x[comb[[2]][b3[X,1]:b3[X,2]],1]
        #Find identical
        y2 <- FUN(y,y1)
        setTxtProgressBar(pb, X)
        return(y2)
    }

    y2 <- unlist(lapply(1:dim(b3)[1], outerM1))
    
    y2 <- add[1 + X] * y2
    return(y2)
}
